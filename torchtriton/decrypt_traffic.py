from Crypto.Cipher import AES
import zlib

# Base62 global vars
BASE_ALPH = tuple("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
BASE_DICT = dict((c, v) for v, c in enumerate(BASE_ALPH))
BASE_LEN = len(BASE_ALPH)

def base62_decode(data):
    if len(data) == 0:
        return b""
    num = 0
    for char in data:
        num = num * BASE_LEN + BASE_DICT[char]
    return bytes.fromhex(hex(num)[2:])


def decrypt_data(data, key, iv):
    # Remove suffix
    data = data[:-9]
    # Remove dots and skip metadata
    data = data.replace('.', '')[7:]
    # Base62 decode
    b62dec = base62_decode(data)
    # AES GCM decrypt and zlib decompress
    cipher = AES.new(key, AES.MODE_GCM, iv) # nonce
    try:
        aesdec = cipher.decrypt_and_verify(b62dec[:-16], b62dec[-16:]) # ciphertext, tag
        return zlib.decompress(aesdec).decode()
    except ValueError:
        return "Decryption failed"

# Embedded into the sample
AES_KEY = b"gIdk8tzrHLOM)mPY-R)QgG[;yRXYCZFU"
AES_IV = b"?BVsNqL]S.Ni"

print(decrypt_data("M.X.p.0300EP9Vvq1QffuOaGzQymfeRx5MoEZLV9HOWsxJnRXR1ja.h4ck.cfd", AES_KEY, AES_IV))
# output: "cwd/tmp"
